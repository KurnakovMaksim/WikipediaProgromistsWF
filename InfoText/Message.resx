<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AndersHalesbergInfoText" xml:space="preserve">
    <value>Разработчик компилятора для Pascal, благодаря которому компиляция программы сократилась до нескольких секунд.

Первая версия компилятора была написана под DOS. Позже компилятор был встроен в среду Turbo Pascal. Благодаря компилятору Хейлсберга продуктивность работы в сфере IT выросла в несколько раз.

Позже Хейлсберг возглавил команду, разработавшую Borland Delphi. И здесь также особое внимание было уделено быстродействию.  Сегодня Delphi – один из самых популярных языков.</value>
  </data>
  <data name="BjörnStraustrupInfoText" xml:space="preserve">
    <value>Создатель языка C++ (улучшенной версии C).

Сегодня язык программирования C++ изучают студенты практически в любом ВУЗе, он давно стал одним из базовых прикладных языков. Синтаксис языка C используется в PHP и других современных языках программирования. Доработки от Бьерна Страуструпа оказались настолько хороши, что сегодня, когда говорят «Си», о базовой версии языка даже не вспоминают.

В наше время программист читает лекции в нескольких ВУЗах, сотрудничает с Morgan Stanley.</value>
  </data>
  <data name="BramCohenInfoText" xml:space="preserve">
    <value>Автор протокола BitTorrent, благодаря которому стала возможной супербыстрая загрузка файлов из сети.

Торрент популярен во всем мире. Число пользователей BitTorrent  оценивается в 250 млн человек. Через торренты скачиваются огромные объемы информации. К сожалению, возможности торрентов активно используют «пираты».</value>
  </data>
  <data name="BrendAnIkeInfoText" xml:space="preserve">
    <value>Разработчик JavaScript. Этот язык считается одним из стандартов в WEB-программировании.

Принимал участие в создании компании Mozilla и браузера Firefox. Занимал пост СЕО. Уволился после скандала, связанного с его позицией по вопросам гей-браков (Брендан – активный участник движения за их запрет в Калифорнии).</value>
  </data>
  <data name="DonaldKnutInfoText" xml:space="preserve">
    <value>Автор уникальной монографии «Искусство программирования», которая стала учебником и настольной книгой программистов во всем мире. Почетный профессор в Стенфорде.

Академические работы Кнута – это огромный труд, охватывающий практически все направления в программировании, начиная от структур данных и заканчивая анализом алгоритмов. Последнее направление Крут создал лично. Кроме теории в монографии содержится множество примеров на языке Ассемблер.

Ведущие разработчики Google, Facebook других крупных проектов не единожды выражали благодарность Дональду Кнуту за уникальный учебник. О Кнуте говорил и Билл Гейтс: «Если вы называете себя программистом, попробуйте прочесть Кнута И если сумеете прочитать эту книгу полностью, отправьте мне свое резюме».</value>
  </data>
  <data name="JamesGoslingInfoText" xml:space="preserve">
    <value>Автор объектно-ориентированного языка Java.

Еще одна крупная разработка — NEWS, система распределения вычислений в компьютерных сетях. Перечень проектов, над которыми он работал, обширен. Здесь и системы анализа результатов спутниковой телеметрии, и редактор текстов Emacs, и многое другое. Некоторое время Гослинг принимал участие в разработке алгоритмов Google, в последнее время занимается разработкой программного обеспечения для подводных исследований.</value>
  </data>
  <data name="JohnCarmackInfoText" xml:space="preserve">
    <value>Один из основателей компании id Software. Известность получил как автор легендарной компьютерной игры Doom.

Идея создания Doom пришла в голову Джона во время корпоративной партии D&amp;D. В то время в компании подобные партии проводили регулярно. И часто на них Джон выполнял роль гейм-мастера.

При создании Doom Джон Кармак первым реализовал оригинальные 3D-трюки, которые применяют в компьютерных играх до сих пор.</value>
  </data>
  <data name="LinusTorvaldsInfoText" xml:space="preserve">
    <value>Финно-американский программист, создатель операционной системы Linux, на которой работают дата-центры и множество компьютеров во всем мире.

Благодаря Торвальдсу, убежденному стороннику freeware (свободно распространяемого софта), в индустрии, где крутятся огромные деньги и все пропитано коммерцией и паранойей, появилась полностью бесплатная операционная система с открытым кодом.  Сегодня в разработке и обновлениях Линукс участвуют тысячи программистов.

В профессиональной среде Линус Торвальдс известен как человек, который не стремится нравиться людям и не стесняется в выражениях. Среди программистов о нем ходят шутки того же плана, что и о Чак Норисе в обывательской среде. Например, утверждают, что он может делить на ноль или играть в 3D игры в уме при помощи чтения исходного кода.</value>
  </data>
  <data name="MarkZuckerbergInfoText" xml:space="preserve">
    <value>Американский программист, разработчик социальной сети Facebook.

Это имя широко известно за пределами профессиональной среды. Цукерберг – фигура публичная. С его социальной сетью в последнее время связано множество скандалов. Тем не менее, проект продолжает успешно развиваться.

Цукерберг убежден, что наиболее эффективны – небольшие команды. Они могут работать плодотворнее, чем крупные коллективы. Потому в обслуживании огромной социальной сети задействовано всего лишь 10 000 человек в мире.</value>
  </data>
  <data name="SirTimBernersLeeInfoText" xml:space="preserve">
    <value>Автор HTTP протокола, на котором основана работа Интернет. Единственный программист, возведенный в звание рыцаря.

Сегодня он возглавляет общественную организацию «Альянс за доступный интернет», основная цель которой – доступный и быстрый интернет для всех. Организация пользуется поддержкой крупных корпораций – Google, Microsoft, Facebook.</value>
  </data>
</root>